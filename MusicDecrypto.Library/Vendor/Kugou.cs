using MusicDecrypto.Library.Common;
using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Threading;

namespace MusicDecrypto.Library.Vendor
{
    public abstract class KugouDecrypto : Decrypto
    {
        private static readonly byte[] _root = {
            0xb8, 0xd5, 0x3d, 0xb2, 0xe9, 0xaf, 0x78, 0x8c, 0x83, 0x33, 0x71, 0x51, 0x76, 0xa0, 0xcd, 0x37,
            0x2f, 0x3e, 0x35, 0x8d, 0xa9, 0xbe, 0x98, 0xb7, 0xe7, 0x8c, 0x22, 0xce, 0x5a, 0x61, 0xdf, 0x68,
            0x69, 0x89, 0xfe, 0xa5, 0xb6, 0xde, 0xa9, 0x77, 0xfc, 0xc8, 0xbd, 0xbd, 0xe5, 0x6d, 0x3e, 0x5a,
            0x36, 0xef, 0x69, 0x4e, 0xbe, 0xe1, 0xe9, 0x66, 0x1c, 0xf3, 0xd9, 0x02, 0xb6, 0xf2, 0x12, 0x9b,
            0x44, 0xd0, 0x6f, 0xb9, 0x35, 0x89, 0xb6, 0x46, 0x6d, 0x73, 0x82, 0x06, 0x69, 0xc1, 0xed, 0xd7,
            0x85, 0xc2, 0x30, 0xdf, 0xa2, 0x62, 0xbe, 0x79, 0x2d, 0x62, 0x62, 0x3d, 0x0d, 0x7e, 0xbe, 0x48,
            0x89, 0x23, 0x02, 0xa0, 0xe4, 0xd5, 0x75, 0x51, 0x32, 0x02, 0x53, 0xfd, 0x16, 0x3a, 0x21, 0x3b,
            0x16, 0x0f, 0xc3, 0xb2, 0xbb, 0xb3, 0xe2, 0xba, 0x3a, 0x3d, 0x13, 0xec, 0xf6, 0x01, 0x45, 0x84,
            0xa5, 0x70, 0x0f, 0x93, 0x49, 0x0c, 0x64, 0xcd, 0x31, 0xd5, 0xcc, 0x4c, 0x07, 0x01, 0x9e, 0x00,
            0x1a, 0x23, 0x90, 0xbf, 0x88, 0x1e, 0x3b, 0xab, 0xa6, 0x3e, 0xc4, 0x73, 0x47, 0x10, 0x7e, 0x3b,
            0x5e, 0xbc, 0xe3, 0x00, 0x84, 0xff, 0x09, 0xd4, 0xe0, 0x89, 0x0f, 0x5b, 0x58, 0x70, 0x4f, 0xfb,
            0x65, 0xd8, 0x5c, 0x53, 0x1b, 0xd3, 0xc8, 0xc6, 0xbf, 0xef, 0x98, 0xb0, 0x50, 0x4f, 0x0f, 0xea,
            0xe5, 0x83, 0x58, 0x8c, 0x28, 0x2c, 0x84, 0x67, 0xcd, 0xd0, 0x9e, 0x47, 0xdb, 0x27, 0x50, 0xca,
            0xf4, 0x63, 0x63, 0xe8, 0x97, 0x7f, 0x1b, 0x4b, 0x0c, 0xc2, 0xc1, 0x21, 0x4c, 0xcc, 0x58, 0xf5,
            0x94, 0x52, 0xa3, 0xf3, 0xd3, 0xe0, 0x68, 0xf4, 0x00, 0x23, 0xf3, 0x5e, 0x0a, 0x7b, 0x93, 0xdd,
            0xab, 0x12, 0xb2, 0x13, 0xe8, 0x84, 0xd7, 0xa7, 0x9f, 0x0f, 0x32, 0x4c, 0x55, 0x1d, 0x04, 0x36,
            0x52, 0xdc, 0x03, 0xf3, 0xf9, 0x4e, 0x42, 0xe9, 0x3d, 0x61, 0xef, 0x7c, 0xb6, 0xb3, 0x93, 0x50,
        };

        private static MemoryStream _mask;
        private static readonly Mutex _initLock = new Mutex();

        public KugouDecrypto(FileInfo file) : base(file) { }

        private static void InitMask()
        {
            try
            {
                _initLock.WaitOne(Timeout.InfiniteTimeSpan);
                if (_mask == null)
                {
                    using var maskBr = Assembly.GetExecutingAssembly().GetManifestResourceStream("MusicDecrypto.Library.Properties.KugouMask.br");
                    using var brotli = new BrotliStream(maskBr, CompressionMode.Decompress);
                    _mask = new MemoryStream();
                    brotli.CopyTo(_mask);
                }
            }
            finally
            {
                _initLock.ReleaseMutex();
            }
        }

        protected override void PreDecrypt()
        {
            if (!_reader.ReadBytes(16).SequenceEqual(Magic()))
                throw new DecryptoException("File header is unexpected.", _input.FullName);

            InitMask();
        }

        protected override void Decrypt()
        {
            var skip = _reader.ReadUInt32();
            _buffer.Seek(0x1c, SeekOrigin.Begin);
            var key = _reader.ReadBytes(17);
            key[16] = 0;
            _buffer.Origin = skip;

            if (_buffer.Length > _mask.Length * 16)
            {
                Logger.Log("File is too large and the output would be incomplete.", _input.FullName, LogLevel.Warn);
                _buffer.SetLength(_mask.Length * 16);
            }

            _buffer.PerformEach((x, i) =>
            {
                byte y = (byte)(x ^ key[i % 17] ^ _root[i % 272] ^ _mask.GetBuffer()[i >> 4]);
                return (byte)(y ^ ((y & 0x0f) << 4));
            });
        }

        protected override void PostDecrypt() { _musicType = _buffer.SniffMusicType(); }

        protected abstract byte[] Magic();
    }

    public sealed class KugouBasicDecrypto : KugouDecrypto
    {
        private static readonly byte[] _magic = { 0x7c, 0xd5, 0x32, 0xeb, 0x86, 0x02, 0x7f, 0x4b, 0xa8, 0xaf, 0xa6, 0x8e, 0x0f, 0xff, 0x99, 0x14 };

        public KugouBasicDecrypto(FileInfo file) : base(file) { }

        protected override byte[] Magic() => _magic;
    }

    public sealed class KugouVprDecrypto : KugouDecrypto
    {
        private static readonly byte[] _magic = { 0x05, 0x28, 0xbc, 0x96, 0xe9, 0xe4, 0x5a, 0x43, 0x91, 0xaa, 0xbd, 0xd0, 0x7a, 0xf5, 0x36, 0x31 };
        private static readonly byte[] _obf = { 0x25, 0xdf, 0xe8, 0xa6, 0x75, 0x1e, 0x75, 0x0e, 0x2f, 0x80, 0xf3, 0x2d, 0xb8, 0xb6, 0xe3, 0x11, 0x00 };

        public KugouVprDecrypto(FileInfo file) : base(file) { }

        protected override void Decrypt()
        {
            base.Decrypt();

            _buffer.PerformEach((x, i) => (byte)(x ^ _obf[i % 17]));
        }

        protected override byte[] Magic() => _magic;
    }
}